// Code generated by MockGen. DO NOT EDIT.
// Source: ./util.go

// Package crypto is a generated GoMock package.
package crypto

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIUtil is a mock of IUtil interface
type MockIUtil struct {
	ctrl     *gomock.Controller
	recorder *MockIUtilMockRecorder
}

// MockIUtilMockRecorder is the mock recorder for MockIUtil
type MockIUtilMockRecorder struct {
	mock *MockIUtil
}

// NewMockIUtil creates a new mock instance
func NewMockIUtil(ctrl *gomock.Controller) *MockIUtil {
	mock := &MockIUtil{ctrl: ctrl}
	mock.recorder = &MockIUtilMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIUtil) EXPECT() *MockIUtilMockRecorder {
	return m.recorder
}

// GenRandomBytes mocks base method
func (m *MockIUtil) GenRandomBytes(size int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenRandomBytes", size)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenRandomBytes indicates an expected call of GenRandomBytes
func (mr *MockIUtilMockRecorder) GenRandomBytes(size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenRandomBytes", reflect.TypeOf((*MockIUtil)(nil).GenRandomBytes), size)
}

// PKCS7Padding mocks base method
func (m *MockIUtil) PKCS7Padding(cipherText []byte, blockSize int) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PKCS7Padding", cipherText, blockSize)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// PKCS7Padding indicates an expected call of PKCS7Padding
func (mr *MockIUtilMockRecorder) PKCS7Padding(cipherText, blockSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PKCS7Padding", reflect.TypeOf((*MockIUtil)(nil).PKCS7Padding), cipherText, blockSize)
}

// PKCS7UnPadding mocks base method
func (m *MockIUtil) PKCS7UnPadding(origData []byte) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PKCS7UnPadding", origData)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// PKCS7UnPadding indicates an expected call of PKCS7UnPadding
func (mr *MockIUtilMockRecorder) PKCS7UnPadding(origData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PKCS7UnPadding", reflect.TypeOf((*MockIUtil)(nil).PKCS7UnPadding), origData)
}

// reverse mocks base method
func (m *MockIUtil) reverse(s []byte) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "reverse", s)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// reverse indicates an expected call of reverse
func (mr *MockIUtilMockRecorder) reverse(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "reverse", reflect.TypeOf((*MockIUtil)(nil).reverse), s)
}

// generateKey mocks base method
func (m *MockIUtil) generateKey(key []byte) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "generateKey", key)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// generateKey indicates an expected call of generateKey
func (mr *MockIUtilMockRecorder) generateKey(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "generateKey", reflect.TypeOf((*MockIUtil)(nil).generateKey), key)
}

// base62Encode mocks base method
func (m *MockIUtil) base62Encode(num int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "base62Encode", num)
	ret0, _ := ret[0].(string)
	return ret0
}

// base62Encode indicates an expected call of base62Encode
func (mr *MockIUtilMockRecorder) base62Encode(num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "base62Encode", reflect.TypeOf((*MockIUtil)(nil).base62Encode), num)
}

// flip mocks base method
func (m *MockIUtil) flip(s []string) map[string]int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "flip", s)
	ret0, _ := ret[0].(map[string]int)
	return ret0
}

// flip indicates an expected call of flip
func (mr *MockIUtilMockRecorder) flip(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "flip", reflect.TypeOf((*MockIUtil)(nil).flip), s)
}

// charCodeAt mocks base method
func (m *MockIUtil) charCodeAt(s string, n int) rune {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "charCodeAt", s, n)
	ret0, _ := ret[0].(rune)
	return ret0
}

// charCodeAt indicates an expected call of charCodeAt
func (mr *MockIUtilMockRecorder) charCodeAt(s, n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "charCodeAt", reflect.TypeOf((*MockIUtil)(nil).charCodeAt), s, n)
}
